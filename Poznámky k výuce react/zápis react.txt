V reactu se používá kombinovaný zápis skládající se z něčeho co vypadá jako html a má to tajné jméno JSX, ale některé atributy uvnitř tagů mají odlišný zápis, protože by se to tlouklo s jinými klíčovými slovy
například zápis class="něco" je v reactu className="něco"

komponenta - ucelená část aplikace, kterou si programujeme jako celek např. v reactu, nebo javascriptu (třeba nákupní košík, nějaká rozbalovací nabídka atd.)
state - je hodnota, která je obsažená uvnitř komponenty. Několik vlastností komponety. Vlastnost se pojmenovává klíčem autor:  a přiřazuje se k němu hodnota "Libor"

 state = { count: 5, autor: "Libor" };

změna hodnoty state - v původním state mám hodnotu např. hodnoutu hour: 12, a chci ji změnit na 20, takže zavolám funkci setState viz níže

this.setState({ hour: 20 });


props - je hodnota, která je přidaná ke komponentě v ostrých závorkách, tam kde komponentu vkládám v tomto případě v app.js takto <Counter date="prdel" />. Zde je klíčem date a hodnota "prdel".

props i state mají různé typy:

number - číslo, zapisuje se jako číslo např. 5
string - text, zapisuje sev uvozovkách "Libor"
boolean - logická hodnota, zapisuje se true/false - boolean se dá pomocí vykřikníku negovat např. !true = false

namísto podmínky If (){} else {} se někdy používá zkratka tzv. ternární operátor (ternární znamená, že má tři části)

(pokud) ? co chci udělat : jinak ;

funkce render() {}
zajišťuje vykreslení komponenty na obrazovku a pokud v komponentě nastanou změny, tak se provádí opakovaně

return ( <div> </div>) - vrací jen jeden prvek, proto nejčastěji div. Kulaté závorky jsou tam proto, že je prvek rozdělen na více řádků, jinak by tam být nemusely, kdyby byl zápis jen jeden dluhý řádek bez odřádkování, je to tedy jen kvůli přehlednosti zápisu.
************************************************************************
Struktury:

objekt - objekt je složitější struktura, která v sobě obsahuje větší množství definovaných hodnot. V našem případě jsou prvky typu objekt state a props, ale objekt může být i něco jiného, čemu definuji různé hodnoty. Objekt se zapisuje do složených závorek viz state a props výše tvoří jej složené závorky, název před rovnítkem jej pouze pojmenovává. Objekt může obshaovat další prvky, třeba objekty, nebo pole, které mohou být i dále v sobě vnořené téměř donekonečna. U vnořených objektů rovnítko nahrazuje dvojtečka.

  kytara = {
    strings: 6,
    type: "Dregnout",
    age: 15,
    tuned: false,
    owner: {
	name: "Libor",
	surname: "Žák",
	}
  };

pole - stejně jako objekt obsahuje více hodnot, ale na rozdíl od objektu nejsou pojmenované a záleží na pořadí v jakém jsou zapsány, jako první se počítá odshora dolů podle pořadí, pozor první řádek nemá index (pořadí) 1, ale 0.

***************************************************
funkce - vlastní funkce se musí nejdříve definovat. prvky:

název funkce - vždy s malým počátečním písmenem
() kulaté závorky, které mohou a nemusí obsahovat jeden, nebo více parametrů. Paramerům definuji jejich jména, oddělují se čárkou. Parametry jsou striktně podle pořadí.
=> arrow function
{} složené závorky, které obsahují kód, co má funkce dělat

Zapisuje se takto:
bez definovaných výchozích hodnot parametrů
nazevNedefFunkce = (parametr1, parametr2) => {}

s definovanou výchozí hodnotou parametru2, když vím, že občas hodnotu nepošlu, tak je nejlepší definovaný parametr umístit na poslední pozici
nazevDefFunkce = (parametr1,parametr2 = false) => {}
---------------------------------------------

volání funkce - funkce se volá přes název a kulaté závorky. V závorkách již přiřazuji jednotlivým parametrům přímo hodnoty, (parametry jsou v pořadí, jak byly definovány, pokud některý vynechám, je undefined)
Zapisuje se takto:

nazevNedefFunkce (1) - v tomto případě má parametr1 hodnotu 1 a parametr2 hodnotu undefined viz definování funkce výše


nazevDefFunkce (1) -  - v tomto případě má parametr1 hodnotu 1 a parametr2 hodnotu false
----------------------------------------------------------------------------------
this. - takto začíná vždy volání funkce, když je definováná v souboru ve kterém je volána (např. je definována před renderem)

this.dayToNight()

do kulatých závorek vypíšu proměnnou kterou volám

*******************************************************************
definice konstanty


const nazevKonstanty = hodnota;

hodnota může být číslo, string, boolean
pokud je hodnota boolean mohu ji vykřikníkem negovat

**********************************************************************
Tlačítko a volání funkce příkazem onClick

pozor před volání funkce je nutno umístit () =>
jinak se díky charakteristice jazyka volání funkce zacyklí a prohlížeč načítání utne a zobrazí chybovou stránku

<button onClick={() => this.dayToNight()}>Nechť je den nocí</button>

*************************************************************************
pole (array)

velikost pole je počet položek v poli, 
položky mají přiřazen index podle pořadí. Pozor první index je 0 (ne 1).
zápis (v tomto případě máme pole pojmenováno kosovo) hodnoty pole se zapisují do hranatých [a,b] závorek a jsou odděleny čárkou
const kosovo = [3, 5, 10, 5, 4]; 

velikost pole zjitím tak že zadám název proměnné.length

kosovo.length

např. když chci vypsat 
console.log (kosovo.length)

pozn.
zápis javascriptu v reactu se mezi tagy zapisuje pomocí složených závorek

příklad vypsání indexu v poli:
<p> {kosovo[3]} se nerovná {moravske[5]} </p>

Normálně by zápis vypadal takto
<p> {this.state.kosovo[3]} se nerovná {this.state.moravske[5]} </p>

ale na začátku funkce jsme si předdefinovali cestu k jednotlivým polím takto:
const { kosovo, moravske, result } = this.state;
tedy že se nacházejí v objektu state zapsaném v tomto souboru (this.)
-----------------------------------------------------
přidání položky do pole se dělá příkazem push
zápis např.:
this.state.moravske.push(addItem);

vypsat všechny položky v poli je možné příkazem join pokud mezi ně chci něco vložit, použiji string v kulatých závorkách (dalo by se i číslo, ale je to zbytečné)
this.setState({ result: moravske.join(", ") });

když chci postupně vypsat všechny položky v poli, nebo položky definované nějakou podmínkou, pužívá se příkaz forEach
this.state.moravske.forEach(item => { console.log(item); });
(používá se ve chvíli, kdy nechci vypsat jednotlivé položky, ale chci s nimi jen nějak pracovat

když chci postupně vypsat všechny položky v poli, používá se příkaz map, který vypíše každou jednu položku a to mohu v rámci funkce nadále pracovat, třeba k ní něco přičíst, přidat apod.
this.state.moravske.map(item => { console.log(item); });

*****************************************************
matematické funkce v javaskriptu
rovná se == porovnává hodnoty bez ohledu na typ (číslo i string)
rovná se === porovnává pouze stejne typy (string / string, číslo / číslo)
nerovná se !== platí stejné pravidlo jako pro rovná se
větší, nebo rovno >=
menší nebo rovno <=
negace !



